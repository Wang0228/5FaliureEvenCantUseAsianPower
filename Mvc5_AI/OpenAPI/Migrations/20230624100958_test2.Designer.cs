// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using openAPI.Models;

#nullable disable

namespace openAPI.Migrations
{
    [DbContext(typeof(Hkcontext))]
    [Migration("20230624100958_test2")]
    partial class test2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("openAPI.Models.Application", b =>
                {
                    b.Property<string>("ApplicationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationId");

                    b.HasIndex(new[] { "MemberId" }, "IX_Applications_MemberId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("openAPI.Models.Chat", b =>
                {
                    b.Property<string>("ChatId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ChatData")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChatId");

                    b.HasIndex(new[] { "UserId" }, "IX_Chats_UserId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("openAPI.Models.Data", b =>
                {
                    b.Property<string>("DataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DataPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DataId");

                    b.HasIndex(new[] { "ApplicationId" }, "IX_Datas_ApplicationId");

                    b.ToTable("Datas");
                });

            modelBuilder.Entity("openAPI.Models.Embedding", b =>
                {
                    b.Property<string>("Index")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DataId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmbeddingAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmbeddingQuestion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmbeddingVectors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("QA");

                    b.HasKey("Index");

                    b.HasIndex(new[] { "DataId" }, "IX_Embedding_DataId");

                    b.ToTable("Embedding", (string)null);
                });

            modelBuilder.Entity("openAPI.Models.Member", b =>
                {
                    b.Property<string>("MemberId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Apikey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("APIKey");

                    b.Property<string>("MemberAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MemberId");

                    b.ToTable("Member", (string)null);
                });

            modelBuilder.Entity("openAPI.Models.Qahistory", b =>
                {
                    b.Property<string>("QahistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("QAHistoryId");

                    b.Property<string>("ChatId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QahistoryA")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("QAHistoryA");

                    b.Property<string>("QahistoryQ")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("QAHistoryQ");

                    b.Property<string>("QahistoryVectors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("QAHistoryVectors");

                    b.HasKey("QahistoryId");

                    b.HasIndex(new[] { "ChatId" }, "IX_QAHistory_ChatId");

                    b.ToTable("QAHistory", (string)null);
                });

            modelBuilder.Entity("openAPI.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "ApplicationId" }, "IX_Users_ApplicationId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("openAPI.Models.Application", b =>
                {
                    b.HasOne("openAPI.Models.Member", "Member")
                        .WithMany("Applications")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("openAPI.Models.Chat", b =>
                {
                    b.HasOne("openAPI.Models.User", "User")
                        .WithMany("Chats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("openAPI.Models.Data", b =>
                {
                    b.HasOne("openAPI.Models.Application", "Application")
                        .WithMany("Data")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("openAPI.Models.Embedding", b =>
                {
                    b.HasOne("openAPI.Models.Data", "Data")
                        .WithMany("Embeddings")
                        .HasForeignKey("DataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Data");
                });

            modelBuilder.Entity("openAPI.Models.Qahistory", b =>
                {
                    b.HasOne("openAPI.Models.Chat", "Chat")
                        .WithMany("Qahistories")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("openAPI.Models.User", b =>
                {
                    b.HasOne("openAPI.Models.Application", "Application")
                        .WithMany("Users")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("openAPI.Models.Application", b =>
                {
                    b.Navigation("Data");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("openAPI.Models.Chat", b =>
                {
                    b.Navigation("Qahistories");
                });

            modelBuilder.Entity("openAPI.Models.Data", b =>
                {
                    b.Navigation("Embeddings");
                });

            modelBuilder.Entity("openAPI.Models.Member", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("openAPI.Models.User", b =>
                {
                    b.Navigation("Chats");
                });
#pragma warning restore 612, 618
        }
    }
}
